git add <filename/directory>
git add . {Add everything that has changed}
git commit {create commit commit object with staged changes}
git commit -a {automatically add all modified files(not new ones)}
git log {a log of all commits starting from HEAD back to the initial commit}
git status {shows which files have changed between the current project state and HEAD}
git diff {shows the diff between HEAD and the current project state}
git diff --cached {compares added files against HEAD}
git rm {mark files to be removed}


REFERRING A COMMIT
caret(^) after a commit name retrieves the parent of that commit. HEAD^ is the parent of the current head commit.

BRANCHING
git branch [new-head-name/branch name] [reference to head/commit from where branch has to be created]
git chekcout [head-name/branch name]
|
|-> Points HEAD to the commit object speified by [head name]
|-> Rewrites all the files in the directory to match the files stored in new HEAD commit
git branch with no arguments list the existing heads/branches with a star next to the current Head
git diff [head1]..[head2] {Diff b/w commits referenced by head1 and head2}
git diff [head1]...[head2] {DIff b/w head2 and the common ancestor of head1 and head2}
git log [head1]..[head2] {shows the change log b/w head2 and the common ancestor of head1 and head2}
git checkout -b [new-branch-name] {create and checkout new-branch from current-branch}
git checkout -b <new-branch> <existing-branch> {Base the new-branch off existing branch rather than current-branch}

UPDATES
git merge <branch-name> {merge the specified branch to the current branch}
git merge --no-ff <branch-name> {merge the specified branch into the current branch, but always generate a merge commit}
git pull <branch-name) {Pull the specified branch name to the current branch}
git push <remote repo name: origin> <branch on origin>
git pull --rebase <remote repo name: origin> <branch on origin: master>
git rebase --continue
git rebase --abort

INITIALATION
git init --bare

CONFIGUARTIONS
git config --global --edit