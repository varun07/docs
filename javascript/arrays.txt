ARRAYS

Methods of arrays:
ES3:
1. join(separatorString):
		default value of separatorString: ,(comma)
2. reverse():
		do in place
3. sort():
		alphabetical order (temporrily converting to string)
   sort(comparisonFunction):
		This function decides which of its two arguments should appear first in the sorted array. If the first argument should appear before the second, the comparison function should return a number less than zero.
	
	If an array contains undefined elements, they are sorted to the end of the array. 
	do in place.
4. concat(arguments)
		creates and returns a new array that contains the elements of the original array on which concat() was invoked, followed by each of the arguments to concat().
		If any of these arguments is itself an array, then it is the array elements that are concatenated, not the array itself. Note, however, that concat() does not recursively flatten arrays of arrays. concat() does not modify the array on which it is invoked.
		
5. slice(fromIndex, toIndex: optional)
		Returns a slice or subarray(new one) having elements from specified fromIndex upto toIndex(not including the element at toIndex).
		If only fromIndex, then returns an array of elements from the start position at fromIndex to the last value of the array.
		If either argument is negative, it specifies an array element relative to last element in the array. For instanceL -1 denotes last element in the array.
6. splice()
		general-purpose method for inserting or removing elements from an array.
		modifies the array on which it is invoked.
		1st argument: the array position at which the insertion and/or deletion is to begin.
		2nd argument: the number of elements that should be deleted from (spliced out of) the array. If this is omitted, all elements from start position to the last element are removed.
		Any arguments after the second one specifies the elements to be inserted into the array starting at the position specified by 1st argument.
		
		splice() returns an array of the deleted elements, or an empty array if no elements were deleted.
		unlike concat(), splice() inserts arrays themselves, not the elements of those arrays.
7. push()
8. pop()
9. unshift(value)
		insert element at the beginning of array.
		returns the new length of the array.
		do in place.
10. shift()
		removes element from the beginning of array.
		returns the first element of the array.
		do in place
11. toString() and toLocaleString()
		comma separate a list of elements of array.
		
ES5:
None of the methods modify the array on which they are invoked.
12. forEach(callbackFn)
		callbackFn = (arrayELement, index, array)
		through an array, invoking a function you specify for each element.
13. map(callBackFn)
		passes each element of the array on which this method is invoked to the callbackFunction(function specified), and returns an array containing the values returned by that function.
14. filter(predicateFn)
		returns an array containing a subset of elements of the array on which this was invoked.
		function that we pass whould be predicate: either retuns true or false.
		
		filter skips missing elements in sparse arrays, and so its return value is always dense.
15. every(predicateFn)
		accepts predicate as argument. 
		returns true if the predicate returns true for each element in the array on which this method was invoked.
16. some(predicateFn)
		accepts predicate as argument
		returns true if there exists atleast 1 element in the array for which the predicate returns true.
		
		Note also that by mathematical convention, every() returns true and some returns false when invoked on an empty array.
		
17. reduce()
		combine the elements of an array, using the function you specify, to produce a single value.
		reduce() takes two arguments.
			1st arg: the (reduction) function that performs the reduction operation.
			2nd arg: (optional) the initial value that you pass to the function.
			
			reductionFn:
				1st arg: accumulated result of the reduction so far. On the first call to the function, this first argument is the initial value you passed as the second argument to reduce().
				2nd argument: value of the element of the array
				3rd argument: index of the array
				4th argument: array itself.
18. reduceRight() 
		works just like reduce(), except that it processes the array from highest index to lowest (right-to-left), rather than from lowest to highest.
	