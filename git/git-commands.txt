MANAGE CHANGES
git add <filename/directory>
git add . {Add everything that has changed}
git commit {create commit commit object with staged changes}
git commit -a {automatically add all modified files(not new ones)}
git log {a log of all commits starting from HEAD back to the initial commit}
git status {shows which files have changed between the current project state and HEAD}
git diff {shows the diff between HEAD and the current project state}
git diff --cached {compares added files against HEAD}
git rm {mark files to be removed}


REFERRING A COMMIT
caret(^) after a commit name retrieves the parent of that commit. HEAD^ is the parent of the current head commit.

BRANCHING
git branch [new-head-name/branch name] [reference to head/commit from where branch has to be created]
git chekcout [head-name/branch name]
|
|-> Points HEAD to the commit object speified by [head name]
|-> Rewrites all the files in the directory to match the files stored in new HEAD commit
git branch with no arguments list the existing heads/branches with a star next to the current Head
git diff [head1]..[head2] {Diff b/w commits referenced by head1 and head2}
git diff [head1]...[head2] {DIff b/w head2 and the common ancestor of head1 and head2}
git log [head1]..[head2] {shows the change log b/w head2 and the common ancestor of head1 and head2}
git checkout -b [new-branch-name] {create and checkout new-branch from current-branch}
git checkout -b <new-branch> <existing-branch> {Base the new-branch off existing branch rather than current-branch}

MANAGING REMOTE BRANCHES
git clone <git-url> {Clones the git repo at specified url to current directory}
git remote {List the short names for each remote handle you specified.}
git remote -v {List the remote names along with the url associated with the short name}
git remote add <shortname> <url> {adds the shortname for the specified url of the repo}
git fetch [remote-name] {fetches the repo for the specified short name of the remote url. Fetch only gets the data/changes, it does not merge the changes.}
git pull {fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on}
git push [remote-name] [branch-name] {ex: git push origin master}
git remote show [remote-name] {to see more information about a particular remote}
git remote rename <oldname> <shortname> {to rename branches}
git remote rm <remote-name> {to remove the remote if not being used}

UPDATES
git merge <branch-name> {merge the specified branch to the current branch}
git merge --no-ff <branch-name> {merge the specified branch into the current branch, but always generate a merge commit}
git pull <branch-name) {Pull the specified branch name to the current branch}
git push <remote repo name: origin> <branch on origin>
git pull --rebase <remote repo name: origin> <branch on origin: master>
git rebase --continue
git rebase --abort

INITIALATION
git init --bare

CONFIGUARTIONS
git config --global --edit {Open configuration user specific configuration files to edit}
	configuration in threee files
	|
	--> <repo>/.git/config – Repository-specific settings.
	--> ~/.gitconfig : User-specific settings. This is where options set with the --global flag are stored.
		In Windows, the file is at C:\Users\<user>.
	--> $(prefix)/etc/gitconfig – System-wide settings
		In Windows Vista and above, the file is at C:\ProgramData\git.
	
git config --global <key> <value> {add user email id to user specific configuration file. Ex: git config --global user.email johndoe@example.com}
git config --global core.editor noteoad {changes the default application with which the configuration file to notepad in windows}
git config --list {List the configurations from all git configuration files. The last entry for the same key is used.}
git config user.name {The used value for the specified key}


SAVING CHANGES
git add <file>/<directory>
git add -p {begin and interactive session that lets u choose portions of a file to add to next commit. This will prompt with u chunk of changes and prompts u for a command. y to stage the chunk, n to ignore the chunk, e to manually edit the chunk, q to exit }
git commit {commit the staged snapshot}
git commit -a {commit a snapshot of all changes in the current directory}

UNDOING CHANGES
git chekout <commit> <file> {Checks out a previous version of a file}
git checkout <commit> {Updates all the files in the working directory to match the specified commit}
git revert <commit> {Generates a new commit that undo all the changs introduced by speci commit and then apply to the current-branch}
git reset <file> {Remove a specified file from the staging area, but leave the working directory unchanged}
git reset {Reset the staging area to match the most recent commit,  but leave the working directory unchanged}
git reset --hard {Reset the staging area and the working directory to match the most recent commit}
git reset --hard <commit> {Move the current branch backward to specified commit and the reset both the staging area and the working directory to match}
git clean {removes untracked files from your current directory; reset removes files from staging area while clean removes untracked files}
git clean -n {Performs a "dry run" of git clean. This will show u which fils are going to be removed before actually removing it}
git clean -f {Removes untracked files from the current directory. '-f'(force) flag is reqd unless clean.requireForce option is set to false(true by default). This will not remove untrackd files specified by .gitignore }
git clean -f <path> {Remove the untracked files from the specified file only}
git clean -df {Remove untracked files and untracked directories from the current directory}
git clean -xf {Removes untracked files from the current direcotry as well as files that git ignores}

HELP
git help <verb>
git <verb> --help